
SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d8  080033d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033d8  080033d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d8  080033d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  2000000c  080033ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  080033ec  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acc  00000000  00000000  0002a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025607  00000000  00000000  0002cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b721  00000000  00000000  0005258f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4752  00000000  00000000  0005dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002648  00000000  00000000  00142454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f80 	.word	0x08002f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002f80 	.word	0x08002f80

080001c8 <SSD1306_Initialise>:
#include "SSD1306.h"
#include "main.h"
#include <string.h> // where memset prototype can be found
#include "horse_anim.h"

uint8_t	SSD1306_Initialise(SSD1306_t *dev, I2C_HandleTypeDef *i2cHandle){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	// Set struct parameters
	dev->i2cHandle = i2cHandle;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	601a      	str	r2, [r3, #0]

	// Store number of transaction errors (returned at the end of the function)
	uint8_t errNum = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;


		status = SSD1306_WriteCommand(dev, SSD1306_REG_DISPLAY_OFF); // Display off
 80001dc:	21ae      	movs	r1, #174	; 0xae
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f91a 	bl	8000418 <SSD1306_WriteCommand>
 80001e4:	4603      	mov	r3, r0
 80001e6:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xA8); // Double byte command! Set multiplex ratio (1 to 64).
 80001e8:	21a8      	movs	r1, #168	; 0xa8
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f914 	bl	8000418 <SSD1306_WriteCommand>
 80001f0:	4603      	mov	r3, r0
 80001f2:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x3F); // Sets that picture on display starts from top. Permitted entries are between 0x0F - 0x3f as per 0xA8 register describes. Smaller value sets screen start lower. As per datasheet Table 10-1 and 10-2 shows few options.
 80001f4:	213f      	movs	r1, #63	; 0x3f
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f90e 	bl	8000418 <SSD1306_WriteCommand>
 80001fc:	4603      	mov	r3, r0
 80001fe:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xD3); // Double byte command! Set display offset.
 8000200:	21d3      	movs	r1, #211	; 0xd3
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f000 f908 	bl	8000418 <SSD1306_WriteCommand>
 8000208:	4603      	mov	r3, r0
 800020a:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x00); // After 0xD3 command the offset can be set with this command value. Value can range from 0x00 - 0x3F. Default value after RESET is 0x00.
 800020c:	2100      	movs	r1, #0
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f000 f902 	bl	8000418 <SSD1306_WriteCommand>
 8000214:	4603      	mov	r3, r0
 8000216:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0x40); // Set display start line. Value can range from 0x40 - 0x7F. 0x40 is equal to line 0 and 0x7F will be equal to line 63.
 8000218:	2140      	movs	r1, #64	; 0x40
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8fc 	bl	8000418 <SSD1306_WriteCommand>
 8000220:	4603      	mov	r3, r0
 8000222:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xA1); // Set segment re-map. Value can be A0 or A1.
 8000224:	21a1      	movs	r1, #161	; 0xa1
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f8f6 	bl	8000418 <SSD1306_WriteCommand>
 800022c:	4603      	mov	r3, r0
 800022e:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0xC8); // Set COM output scan direction. Value can be C0 or C8.
 8000230:	21c8      	movs	r1, #200	; 0xc8
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f8f0 	bl	8000418 <SSD1306_WriteCommand>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xDA); // Double byte command! Set COM pins hardware configuration.
 800023c:	21da      	movs	r1, #218	; 0xda
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f000 f8ea 	bl	8000418 <SSD1306_WriteCommand>
 8000244:	4603      	mov	r3, r0
 8000246:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x12); // 0x12 uses 8 pages, if you set 0x02, than only 4 pages are represented on display.
 8000248:	2112      	movs	r1, #18
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 f8e4 	bl	8000418 <SSD1306_WriteCommand>
 8000250:	4603      	mov	r3, r0
 8000252:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0x81); // Double byte command! Set contrast control register.
 8000254:	2181      	movs	r1, #129	; 0x81
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f8de 	bl	8000418 <SSD1306_WriteCommand>
 800025c:	4603      	mov	r3, r0
 800025e:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x7F); // After 0x81 command this value sets contrast. Value can range from 0x00 - 0xFF. Default value after RESET is 0x7F.
 8000260:	217f      	movs	r1, #127	; 0x7f
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f8d8 	bl	8000418 <SSD1306_WriteCommand>
 8000268:	4603      	mov	r3, r0
 800026a:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, SSD1306_REG_ENTIRE_DISPLAY_ON_RAM); // Set display to take data from RAM or ignore RAM data and just be ON.
 800026c:	21a4      	movs	r1, #164	; 0xa4
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f000 f8d2 	bl	8000418 <SSD1306_WriteCommand>
 8000274:	4603      	mov	r3, r0
 8000276:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, SSD1306_REG_DISPLAY_NORMAL); // Set display state to normal or inverse.
 8000278:	21a6      	movs	r1, #166	; 0xa6
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f000 f8cc 	bl	8000418 <SSD1306_WriteCommand>
 8000280:	4603      	mov	r3, r0
 8000282:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xD5); // Double byte command! Set display clock divide ratio/oscillator frequency.
 8000284:	21d5      	movs	r1, #213	; 0xd5
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f8c6 	bl	8000418 <SSD1306_WriteCommand>
 800028c:	4603      	mov	r3, r0
 800028e:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0xF0); // Consists of 2 parts: lower 2 bytes sets divide ratio, higher 2 bytes set oscillator frequency. Default value for divide ratio: 0x00, default value for oscillator frequency: 0x08. End value can be set this way (0x08 << 4) | 0x00 and then you get 0x80. How D5h values work can be seen in datasheet. Fosc is set to max value for speed purposes.
 8000290:	21f0      	movs	r1, #240	; 0xf0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f000 f8c0 	bl	8000418 <SSD1306_WriteCommand>
 8000298:	4603      	mov	r3, r0
 800029a:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0x8D); // Double byte command! Charge pump setting up.
 800029c:	218d      	movs	r1, #141	; 0x8d
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 f8ba 	bl	8000418 <SSD1306_WriteCommand>
 80002a4:	4603      	mov	r3, r0
 80002a6:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x14); // Enable charge pump.
 80002a8:	2114      	movs	r1, #20
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f8b4 	bl	8000418 <SSD1306_WriteCommand>
 80002b0:	4603      	mov	r3, r0
 80002b2:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, SSD1306_REG_DISPLAY_ON); // Set entire display ON
 80002b4:	21af      	movs	r1, #175	; 0xaf
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f8ae 	bl	8000418 <SSD1306_WriteCommand>
 80002bc:	4603      	mov	r3, r0
 80002be:	73bb      	strb	r3, [r7, #14]

	errNum += (status != HAL_OK);
 80002c0:	7bbb      	ldrb	r3, [r7, #14]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	bf14      	ite	ne
 80002c6:	2301      	movne	r3, #1
 80002c8:	2300      	moveq	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	461a      	mov	r2, r3
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	4413      	add	r3, r2
 80002d2:	73fb      	strb	r3, [r7, #15]
	// Return number of errors (0 if successful initialisation)

	memset(dev->BUFFER, 0x00, sizeof(dev->BUFFER)); //
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3304      	adds	r3, #4
 80002d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fe46 	bl	8002f70 <memset>
	dev->BUFFER[1022]= 0x7F;
	dev->BUFFER[1023]= 0x14;
	*/
	//dev->PosX = 1;
	//dev->PosY = 1;
	SSD1306_ScreenUpdate(dev);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f000 f808 	bl	80002fa <SSD1306_ScreenUpdate>
	SSD13066_DrawBitmap(dev);
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f000 f830 	bl	8000350 <SSD13066_DrawBitmap>


	return errNum;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <SSD1306_ScreenUpdate>:

void SSD1306_ScreenUpdate(SSD1306_t *dev){
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b084      	sub	sp, #16
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
	//SSD1306_WriteCommand(dev, 0x20);
	//SSD1306_WriteCommand(dev, 0x00);


	//Few pictures to test screen.
	for(uint8_t i=0; i < SSD1306_HEIGHT/8; i++){
 8000302:	2300      	movs	r3, #0
 8000304:	73fb      	strb	r3, [r7, #15]
 8000306:	e01a      	b.n	800033e <SSD1306_ScreenUpdate+0x44>

		SSD1306_WriteCommand(dev, 0xB0+i);	//	iterates through page start addresses
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	3b50      	subs	r3, #80	; 0x50
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4619      	mov	r1, r3
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 f881 	bl	8000418 <SSD1306_WriteCommand>
		SSD1306_WriteCommand(dev, 0x00);	// ??? can it be used without it?
 8000316:	2100      	movs	r1, #0
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f87d 	bl	8000418 <SSD1306_WriteCommand>
		SSD1306_WriteCommand(dev, 0x10);	// ??? can it be used without it?
 800031e:	2110      	movs	r1, #16
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f000 f879 	bl	8000418 <SSD1306_WriteCommand>
		SSD1306_WriteData(dev, &dev->BUFFER[SSD1306_WIDTH*i]);
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	01db      	lsls	r3, r3, #7
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	3304      	adds	r3, #4
 8000330:	4619      	mov	r1, r3
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 f889 	bl	800044a <SSD1306_WriteData>
	for(uint8_t i=0; i < SSD1306_HEIGHT/8; i++){
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	3301      	adds	r3, #1
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	2b07      	cmp	r3, #7
 8000342:	d9e1      	bls.n	8000308 <SSD1306_ScreenUpdate+0xe>
		//SSD1306_WriteData(dev, &horse1[SSD1306_WIDTH*i]);
		//SSD1306_WriteData(dev, &CLOWN1[SSD1306_WIDTH*i]);

	}
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <SSD13066_DrawBitmap>:
	uint8_t y = dev->PosY;

	dev->BUFFER[x+(y/8)*128] |= 1 << (y%8);
}

void SSD13066_DrawBitmap(SSD1306_t *dev){
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]

	uint8_t x = dev->PosX;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800035e:	73fb      	strb	r3, [r7, #15]
	x = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	73fb      	strb	r3, [r7, #15]
	uint8_t y = dev->PosY;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800036a:	73bb      	strb	r3, [r7, #14]
	y = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0, c=0;
 8000370:	2300      	movs	r3, #0
 8000372:	737b      	strb	r3, [r7, #13]
 8000374:	2300      	movs	r3, #0
 8000376:	733b      	strb	r3, [r7, #12]

	for(; y < 64; y++, x=0){
 8000378:	e043      	b.n	8000402 <SSD13066_DrawBitmap+0xb2>

		for(; x < 8; x++, i++){ // 128
		//for(; y < 8; y++){

			if (i>7){
 800037a:	7b7b      	ldrb	r3, [r7, #13]
 800037c:	2b07      	cmp	r3, #7
 800037e:	d904      	bls.n	800038a <SSD13066_DrawBitmap+0x3a>
				i=0;
 8000380:	2300      	movs	r3, #0
 8000382:	737b      	strb	r3, [r7, #13]
				c++;
 8000384:	7b3b      	ldrb	r3, [r7, #12]
 8000386:	3301      	adds	r3, #1
 8000388:	733b      	strb	r3, [r7, #12]
			}
			uint8_t a = (CLOWN1[c] & ( 1 << i )) >> i;
 800038a:	7b3b      	ldrb	r3, [r7, #12]
 800038c:	4a21      	ldr	r2, [pc, #132]	; (8000414 <SSD13066_DrawBitmap+0xc4>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	4619      	mov	r1, r3
 8000392:	7b7b      	ldrb	r3, [r7, #13]
 8000394:	2201      	movs	r2, #1
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	ea01 0203 	and.w	r2, r1, r3
 800039e:	7b7b      	ldrb	r3, [r7, #13]
 80003a0:	fa42 f303 	asr.w	r3, r2, r3
 80003a4:	72fb      	strb	r3, [r7, #11]

			dev->BUFFER[x+(y/8)*128] |= a << (y%8);
 80003a6:	7bfa      	ldrb	r2, [r7, #15]
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b2d8      	uxtb	r0, r3
 80003ae:	4603      	mov	r3, r0
 80003b0:	01db      	lsls	r3, r3, #7
 80003b2:	4413      	add	r3, r2
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	b25a      	sxtb	r2, r3
 80003bc:	7af9      	ldrb	r1, [r7, #11]
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	f003 0307 	and.w	r3, r3, #7
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	b25b      	sxtb	r3, r3
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b259      	sxtb	r1, r3
 80003ce:	7bfa      	ldrb	r2, [r7, #15]
 80003d0:	4603      	mov	r3, r0
 80003d2:	01db      	lsls	r3, r3, #7
 80003d4:	4413      	add	r3, r2
 80003d6:	b2c9      	uxtb	r1, r1
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	460a      	mov	r2, r1
 80003de:	711a      	strb	r2, [r3, #4]
		for(; x < 8; x++, i++){ // 128
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	3301      	adds	r3, #1
 80003e4:	73fb      	strb	r3, [r7, #15]
 80003e6:	7b7b      	ldrb	r3, [r7, #13]
 80003e8:	3301      	adds	r3, #1
 80003ea:	737b      	strb	r3, [r7, #13]
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b07      	cmp	r3, #7
 80003f0:	d9c3      	bls.n	800037a <SSD13066_DrawBitmap+0x2a>
			//SSD1306_ScreenUpdate(dev);

		}
		SSD1306_ScreenUpdate(dev);
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f7ff ff81 	bl	80002fa <SSD1306_ScreenUpdate>
	for(; y < 64; y++, x=0){
 80003f8:	7bbb      	ldrb	r3, [r7, #14]
 80003fa:	3301      	adds	r3, #1
 80003fc:	73bb      	strb	r3, [r7, #14]
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	2b3f      	cmp	r3, #63	; 0x3f
 8000406:	d9f1      	bls.n	80003ec <SSD13066_DrawBitmap+0x9c>
	}

}
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	08002f98 	.word	0x08002f98

08000418 <SSD1306_WriteCommand>:

	return HAL_I2C_Mem_Read(dev->i2cHandle, SSD1306_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}
*/

HAL_StatusTypeDef SSD1306_WriteCommand(SSD1306_t *dev, uint8_t command){
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af04      	add	r7, sp, #16
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SSD1306_I2C_ADDR, SSD1306_COMMAND, I2C_MEMADD_SIZE_8BIT, &command, 1, HAL_MAX_DELAY);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6818      	ldr	r0, [r3, #0]
 8000428:	f04f 33ff 	mov.w	r3, #4294967295
 800042c:	9302      	str	r3, [sp, #8]
 800042e:	2301      	movs	r3, #1
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	1cfb      	adds	r3, r7, #3
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2301      	movs	r3, #1
 8000438:	2200      	movs	r2, #0
 800043a:	2178      	movs	r1, #120	; 0x78
 800043c:	f000 fe8e 	bl	800115c <HAL_I2C_Mem_Write>
 8000440:	4603      	mov	r3, r0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <SSD1306_WriteData>:

HAL_StatusTypeDef SSD1306_WriteData(SSD1306_t *dev, uint8_t *data){
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af04      	add	r7, sp, #16
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SSD1306_I2C_ADDR, SSD1306_DATA, I2C_MEMADD_SIZE_8BIT, data, SSD1306_WIDTH, HAL_MAX_DELAY);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6818      	ldr	r0, [r3, #0]
 8000458:	f04f 33ff 	mov.w	r3, #4294967295
 800045c:	9302      	str	r3, [sp, #8]
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	2240      	movs	r2, #64	; 0x40
 800046a:	2178      	movs	r1, #120	; 0x78
 800046c:	f000 fe76 	bl	800115c <HAL_I2C_Mem_Write>
 8000470:	4603      	mov	r3, r0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 fa71 	bl	8000966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f812 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f8d2 	bl	8000630 <MX_GPIO_Init>
  MX_I2C1_Init();
 800048c:	f000 f854 	bl	8000538 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000490:	f000 f890 	bl	80005b4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Initialise display
  SSD1306_Initialise(&disp, &hi2c2);
 8000494:	4903      	ldr	r1, [pc, #12]	; (80004a4 <main+0x28>)
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <main+0x2c>)
 8000498:	f7ff fe96 	bl	80001c8 <SSD1306_Initialise>
    /* USER CODE END WHILE */
	 // ADXL345_ReadAccelerations(&acc); executable code

	  //SSD1306_Puts ("Embedded", &Font_7x10, 1);

	  SSD1306_ScreenUpdate(&disp);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <main+0x2c>)
 800049e:	f7ff ff2c 	bl	80002fa <SSD1306_ScreenUpdate>
 80004a2:	e7fb      	b.n	800049c <main+0x20>
 80004a4:	2000007c 	.word	0x2000007c
 80004a8:	200000d0 	.word	0x200000d0

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b096      	sub	sp, #88	; 0x58
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2244      	movs	r2, #68	; 0x44
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fd58 	bl	8002f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004d2:	f001 fa4f 	bl	8001974 <HAL_PWREx_ControlVoltageScaling>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004dc:	f000 f90a 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004e0:	2310      	movs	r3, #16
 80004e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004e4:	2301      	movs	r3, #1
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004ec:	2360      	movs	r3, #96	; 0x60
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 fa91 	bl	8001a20 <HAL_RCC_OscConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000504:	f000 f8f6 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	230f      	movs	r3, #15
 800050a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051c:	463b      	mov	r3, r7
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fe59 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800052c:	f000 f8e2 	bl	80006f4 <Error_Handler>
  }
}
 8000530:	bf00      	nop
 8000532:	3758      	adds	r7, #88	; 0x58
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_I2C1_Init+0x74>)
 800053e:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <MX_I2C1_Init+0x78>)
 8000540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_I2C1_Init+0x74>)
 8000544:	f640 6214 	movw	r2, #3604	; 0xe14
 8000548:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_I2C1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_I2C1_Init+0x74>)
 8000552:	2201      	movs	r2, #1
 8000554:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_I2C1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_I2C1_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_I2C1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_I2C1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <MX_I2C1_Init+0x74>)
 8000576:	f000 fd62 	bl	800103e <HAL_I2C_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000580:	f000 f8b8 	bl	80006f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000584:	2100      	movs	r1, #0
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_I2C1_Init+0x74>)
 8000588:	f001 f94e 	bl	8001828 <HAL_I2CEx_ConfigAnalogFilter>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000592:	f000 f8af 	bl	80006f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000596:	2100      	movs	r1, #0
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_I2C1_Init+0x74>)
 800059a:	f001 f990 	bl	80018be <HAL_I2CEx_ConfigDigitalFilter>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005a4:	f000 f8a6 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000028 	.word	0x20000028
 80005b0:	40005400 	.word	0x40005400

080005b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_I2C2_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_I2C2_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_I2C2_Init+0x74>)
 80005c0:	f640 6214 	movw	r2, #3604	; 0xe14
 80005c4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_I2C2_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_I2C2_Init+0x74>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_I2C2_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_I2C2_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C2_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_I2C2_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <MX_I2C2_Init+0x74>)
 80005f2:	f000 fd24 	bl	800103e <HAL_I2C_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f87a 	bl	80006f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000600:	2100      	movs	r1, #0
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <MX_I2C2_Init+0x74>)
 8000604:	f001 f910 	bl	8001828 <HAL_I2CEx_ConfigAnalogFilter>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800060e:	f000 f871 	bl	80006f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C2_Init+0x74>)
 8000616:	f001 f952 	bl	80018be <HAL_I2CEx_ConfigDigitalFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f868 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000007c 	.word	0x2000007c
 800062c:	40005800 	.word	0x40005800

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <MX_GPIO_Init+0xbc>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a28      	ldr	r2, [pc, #160]	; (80006ec <MX_GPIO_Init+0xbc>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_GPIO_Init+0xbc>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MX_GPIO_Init+0xbc>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <MX_GPIO_Init+0xbc>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_GPIO_Init+0xbc>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_GPIO_Init+0xbc>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_GPIO_Init+0xbc>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_GPIO_Init+0xbc>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xc0>)
 8000694:	f000 fc98 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_INT2_Pin */
  GPIO_InitStruct.Pin = A_INT2_Pin;
 8000698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_INT2_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f000 fadf 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b6:	2340      	movs	r3, #64	; 0x40
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <MX_GPIO_Init+0xc0>)
 80006ce:	f000 fad1 	bl	8000c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2017      	movs	r0, #23
 80006d8:	f000 fa95 	bl	8000c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006dc:	2017      	movs	r0, #23
 80006de:	f000 faae 	bl	8000c3e <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	; 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	; 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0ae      	sub	sp, #184	; 0xb8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	2288      	movs	r2, #136	; 0x88
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fc01 	bl	8002f70 <memset>
  if(hi2c->Instance==I2C1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a42      	ldr	r2, [pc, #264]	; (800087c <HAL_I2C_MspInit+0x134>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d13c      	bne.n	80007f2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f001 ff13 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000790:	f7ff ffb0 	bl	80006f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <HAL_I2C_MspInit+0x138>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000798:	4a39      	ldr	r2, [pc, #228]	; (8000880 <HAL_I2C_MspInit+0x138>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a0:	4b37      	ldr	r3, [pc, #220]	; (8000880 <HAL_I2C_MspInit+0x138>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	2312      	movs	r3, #18
 80007b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c6:	2304      	movs	r3, #4
 80007c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007d0:	4619      	mov	r1, r3
 80007d2:	482c      	ldr	r0, [pc, #176]	; (8000884 <HAL_I2C_MspInit+0x13c>)
 80007d4:	f000 fa4e 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <HAL_I2C_MspInit+0x138>)
 80007da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007dc:	4a28      	ldr	r2, [pc, #160]	; (8000880 <HAL_I2C_MspInit+0x138>)
 80007de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e2:	6593      	str	r3, [r2, #88]	; 0x58
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <HAL_I2C_MspInit+0x138>)
 80007e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007f0:	e040      	b.n	8000874 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <HAL_I2C_MspInit+0x140>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d13b      	bne.n	8000874 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000800:	2300      	movs	r3, #0
 8000802:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fed1 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000814:	f7ff ff6e 	bl	80006f4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_I2C_MspInit+0x138>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <HAL_I2C_MspInit+0x138>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_I2C_MspInit+0x138>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000830:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800084a:	2304      	movs	r3, #4
 800084c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000854:	4619      	mov	r1, r3
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_I2C_MspInit+0x13c>)
 8000858:	f000 fa0c 	bl	8000c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_I2C_MspInit+0x138>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_I2C_MspInit+0x138>)
 8000862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000866:	6593      	str	r3, [r2, #88]	; 0x58
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_I2C_MspInit+0x138>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	bf00      	nop
 8000876:	37b8      	adds	r7, #184	; 0xb8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40005400 	.word	0x40005400
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400
 8000888:	40005800 	.word	0x40005800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f89a 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_INT2_Pin);
 80008e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e8:	f000 fb86 	bl	8000ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f002 faf1 	bl	8002f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fd99 	bl	800047c <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000958:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000960:	200004dc 	.word	0x200004dc

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>

08000966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f93d 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f80e 	bl	8000998 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff feba 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d023      	beq.n	80009f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_InitTick+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f949 	bl	8000c5a <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10f      	bne.n	80009ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d809      	bhi.n	80009e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f913 	bl	8000c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0x74>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e001      	b.n	80009f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200004d8 	.word	0x200004d8

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200004d8 	.word	0x200004d8

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff29 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff3e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff31 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e17f      	b.n	8000f84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8171 	beq.w	8000f7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d005      	beq.n	8000cb4 <HAL_GPIO_Init+0x40>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d130      	bne.n	8000d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	f003 0201 	and.w	r2, r3, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d118      	bne.n	8000d54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d017      	beq.n	8000d90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	6939      	ldr	r1, [r7, #16]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80ac 	beq.w	8000f7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <HAL_GPIO_Init+0x330>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3e:	4a5a      	ldr	r2, [pc, #360]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e68:	d025      	beq.n	8000eb6 <HAL_GPIO_Init+0x242>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4f      	ldr	r2, [pc, #316]	; (8000fac <HAL_GPIO_Init+0x338>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01f      	beq.n	8000eb2 <HAL_GPIO_Init+0x23e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4e      	ldr	r2, [pc, #312]	; (8000fb0 <HAL_GPIO_Init+0x33c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x23a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4d      	ldr	r2, [pc, #308]	; (8000fb4 <HAL_GPIO_Init+0x340>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x236>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <HAL_GPIO_Init+0x344>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x232>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4b      	ldr	r2, [pc, #300]	; (8000fbc <HAL_GPIO_Init+0x348>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x22e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <HAL_GPIO_Init+0x34c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x22a>
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	e00c      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	e00a      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e008      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e004      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x244>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	f002 0203 	and.w	r2, r2, #3
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec8:	4937      	ldr	r1, [pc, #220]	; (8000fa8 <HAL_GPIO_Init+0x334>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000efa:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f24:	4a27      	ldr	r2, [pc, #156]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f4e:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <HAL_GPIO_Init+0x350>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f47f ae78 	bne.w	8000c84 <HAL_GPIO_Init+0x10>
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000c00 	.word	0x48000c00
 8000fb8:	48001000 	.word	0x48001000
 8000fbc:	48001400 	.word	0x48001400
 8000fc0:	48001800 	.word	0x48001800
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f806 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e081      	b.n	8001154 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d106      	bne.n	800106a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fb6f 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2224      	movs	r2, #36	; 0x24
 800106e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0201 	bic.w	r2, r2, #1
 8001080:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800108e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800109e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d107      	bne.n	80010b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	e006      	b.n	80010c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d104      	bne.n	80010d8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69d9      	ldr	r1, [r3, #28]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0201 	orr.w	r2, r2, #1
 8001134:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2220      	movs	r2, #32
 8001140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	817b      	strh	r3, [r7, #10]
 800116e:	460b      	mov	r3, r1
 8001170:	813b      	strh	r3, [r7, #8]
 8001172:	4613      	mov	r3, r2
 8001174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b20      	cmp	r3, #32
 8001180:	f040 80f9 	bne.w	8001376 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_I2C_Mem_Write+0x34>
 800118a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0ed      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_I2C_Mem_Write+0x4e>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e0e6      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011b2:	f7ff fc41 	bl	8000a38 <HAL_GetTick>
 80011b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2319      	movs	r3, #25
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f955 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0d1      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2221      	movs	r2, #33	; 0x21
 80011d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2240      	movs	r2, #64	; 0x40
 80011e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a3a      	ldr	r2, [r7, #32]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011fc:	88f8      	ldrh	r0, [r7, #6]
 80011fe:	893a      	ldrh	r2, [r7, #8]
 8001200:	8979      	ldrh	r1, [r7, #10]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4603      	mov	r3, r0
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f8b9 	bl	8001384 <I2C_RequestMemoryWrite>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0a9      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001228:	b29b      	uxth	r3, r3
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d90e      	bls.n	800124c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	22ff      	movs	r2, #255	; 0xff
 8001232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	8979      	ldrh	r1, [r7, #10]
 800123c:	2300      	movs	r3, #0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fabd 	bl	80017c4 <I2C_TransferConfig>
 800124a:	e00f      	b.n	800126c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125a:	b2da      	uxtb	r2, r3
 800125c:	8979      	ldrh	r1, [r7, #10]
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 faac 	bl	80017c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f000 f93f 	bl	80014f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e07b      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129a:	b29b      	uxth	r3, r3
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d034      	beq.n	8001324 <HAL_I2C_Mem_Write+0x1c8>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d130      	bne.n	8001324 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	2200      	movs	r2, #0
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f8d1 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e04d      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d90e      	bls.n	8001304 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	8979      	ldrh	r1, [r7, #10]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 fa61 	bl	80017c4 <I2C_TransferConfig>
 8001302:	e00f      	b.n	8001324 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29a      	uxth	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001312:	b2da      	uxtb	r2, r3
 8001314:	8979      	ldrh	r1, [r7, #10]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fa50 	bl	80017c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001328:	b29b      	uxth	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d19e      	bne.n	800126c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f91e 	bl	8001574 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e01a      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2220      	movs	r2, #32
 8001348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_I2C_Mem_Write+0x224>)
 8001356:	400b      	ands	r3, r1
 8001358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2220      	movs	r2, #32
 800135e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001376:	2302      	movs	r3, #2
  }
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	fe00e800 	.word	0xfe00e800

08001384 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af02      	add	r7, sp, #8
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	4608      	mov	r0, r1
 800138e:	4611      	mov	r1, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4603      	mov	r3, r0
 8001394:	817b      	strh	r3, [r7, #10]
 8001396:	460b      	mov	r3, r1
 8001398:	813b      	strh	r3, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	8979      	ldrh	r1, [r7, #10]
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <I2C_RequestMemoryWrite+0xa4>)
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 fa09 	bl	80017c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	69b9      	ldr	r1, [r7, #24]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f89c 	bl	80014f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e02c      	b.n	8001420 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013cc:	893b      	ldrh	r3, [r7, #8]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
 80013d6:	e015      	b.n	8001404 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013d8:	893b      	ldrh	r3, [r7, #8]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f882 	bl	80014f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e012      	b.n	8001420 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2200      	movs	r2, #0
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f830 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	80002000 	.word	0x80002000

0800142c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d103      	bne.n	800144a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	619a      	str	r2, [r3, #24]
  }
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001484:	e022      	b.n	80014cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d01e      	beq.n	80014cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff fad3 	bl	8000a38 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d302      	bcc.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d113      	bne.n	80014cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f043 0220 	orr.w	r2, r3, #32
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2220      	movs	r2, #32
 80014b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e00f      	b.n	80014ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4013      	ands	r3, r2
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d0cd      	beq.n	8001486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001500:	e02c      	b.n	800155c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f870 	bl	80015ec <I2C_IsErrorOccurred>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e02a      	b.n	800156c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d01e      	beq.n	800155c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151e:	f7ff fa8b 	bl	8000a38 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	429a      	cmp	r2, r3
 800152c:	d302      	bcc.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d113      	bne.n	800155c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2220      	movs	r2, #32
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e007      	b.n	800156c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d1cb      	bne.n	8001502 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001580:	e028      	b.n	80015d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f830 	bl	80015ec <I2C_IsErrorOccurred>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e026      	b.n	80015e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001596:	f7ff fa4f 	bl	8000a38 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d302      	bcc.n	80015ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d113      	bne.n	80015d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2220      	movs	r2, #32
 80015bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e007      	b.n	80015e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d1cf      	bne.n	8001582 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	d075      	beq.n	8001704 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2210      	movs	r2, #16
 800161e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001620:	e056      	b.n	80016d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d052      	beq.n	80016d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800162a:	f7ff fa05 	bl	8000a38 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d302      	bcc.n	8001640 <I2C_IsErrorOccurred+0x54>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d147      	bne.n	80016d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001652:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001662:	d12e      	bne.n	80016c2 <I2C_IsErrorOccurred+0xd6>
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800166a:	d02a      	beq.n	80016c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	2b20      	cmp	r3, #32
 8001670:	d027      	beq.n	80016c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001680:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001682:	f7ff f9d9 	bl	8000a38 <HAL_GetTick>
 8001686:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001688:	e01b      	b.n	80016c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800168a:	f7ff f9d5 	bl	8000a38 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b19      	cmp	r3, #25
 8001696:	d914      	bls.n	80016c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d1dc      	bne.n	800168a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d003      	beq.n	80016e6 <I2C_IsErrorOccurred+0xfa>
 80016de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d09d      	beq.n	8001622 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2220      	movs	r2, #32
 80016f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01c      	beq.n	80017b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff fe56 	bl	800142c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <I2C_IsErrorOccurred+0x1d4>)
 800178c:	400b      	ands	r3, r1
 800178e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2220      	movs	r2, #32
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80017b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	fe00e800 	.word	0xfe00e800

080017c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	817b      	strh	r3, [r7, #10]
 80017d2:	4613      	mov	r3, r2
 80017d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017d6:	897b      	ldrh	r3, [r7, #10]
 80017d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	0d5b      	lsrs	r3, r3, #21
 80017fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <I2C_TransferConfig+0x60>)
 8001804:	430b      	orrs	r3, r1
 8001806:	43db      	mvns	r3, r3
 8001808:	ea02 0103 	and.w	r1, r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	03ff63ff 	.word	0x03ff63ff

08001828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b20      	cmp	r3, #32
 800183c:	d138      	bne.n	80018b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001848:	2302      	movs	r3, #2
 800184a:	e032      	b.n	80018b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800187a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d139      	bne.n	8001948 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018de:	2302      	movs	r3, #2
 80018e0:	e033      	b.n	800194a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2224      	movs	r2, #36	; 0x24
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001910:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <HAL_PWREx_GetVoltageRange+0x18>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000

08001974 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001982:	d130      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001990:	d038      	beq.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800199a:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2232      	movs	r2, #50	; 0x32
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b8:	e002      	b.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019cc:	d102      	bne.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f2      	bne.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e0:	d110      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e00f      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d007      	beq.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40007000 	.word	0x40007000
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e3ca      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a32:	4b97      	ldr	r3, [pc, #604]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3c:	4b94      	ldr	r3, [pc, #592]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80e4 	beq.w	8001c1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4a>
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b0c      	cmp	r3, #12
 8001a5e:	f040 808b 	bne.w	8001b78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 8087 	bne.w	8001b78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x62>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e3a2      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4b82      	ldr	r3, [pc, #520]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_RCC_OscConfig+0x7c>
 8001a92:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9a:	e005      	b.n	8001aa8 <HAL_RCC_OscConfig+0x88>
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d223      	bcs.n	8001af4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fd1d 	bl	80024f0 <RCC_SetFlashLatencyFromMSIRange>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e383      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a72      	ldr	r2, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	f043 0308 	orr.w	r3, r3, #8
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	496d      	ldr	r1, [pc, #436]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ade:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	4968      	ldr	r1, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
 8001af2:	e025      	b.n	8001b40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af4:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4960      	ldr	r1, [pc, #384]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	495b      	ldr	r1, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fcdd 	bl	80024f0 <RCC_SetFlashLatencyFromMSIRange>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e343      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b40:	f000 fc4a 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	4950      	ldr	r1, [pc, #320]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <HAL_RCC_OscConfig+0x278>)
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe ff17 	bl	8000998 <HAL_InitTick>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d052      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	e327      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d032      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b80:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a42      	ldr	r2, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe ff54 	bl	8000a38 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b94:	f7fe ff50 	bl	8000a38 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e310      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb2:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4931      	ldr	r1, [pc, #196]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	492c      	ldr	r1, [pc, #176]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
 8001be4:	e01a      	b.n	8001c1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf2:	f7fe ff21 	bl	8000a38 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfa:	f7fe ff1d 	bl	8000a38 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e2dd      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0c:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x1da>
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d074      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x21a>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d10e      	bne.n	8001c52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d10b      	bne.n	8001c52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d064      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d160      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e2ba      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x24a>
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e026      	b.n	8001cb8 <HAL_RCC_OscConfig+0x298>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c72:	d115      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x280>
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a02      	ldr	r2, [pc, #8]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x298>
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08003398 	.word	0x08003398
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	4ba0      	ldr	r3, [pc, #640]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a9f      	ldr	r2, [pc, #636]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a9c      	ldr	r2, [pc, #624]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe feba 	bl	8000a38 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7fe feb6 	bl	8000a38 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e276      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2a8>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fea6 	bl	8000a38 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7fe fea2 	bl	8000a38 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e262      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2d0>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d060      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x310>
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x328>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e23f      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b76      	ldr	r3, [pc, #472]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	4973      	ldr	r1, [pc, #460]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5c:	e040      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d023      	beq.n	8001dae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7fe fe61 	bl	8000a38 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7fe fe5d 	bl	8000a38 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e21d      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	495f      	ldr	r1, [pc, #380]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e018      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a5c      	ldr	r2, [pc, #368]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe fe3d 	bl	8000a38 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7fe fe39 	bl	8000a38 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1f9      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7fe fe18 	bl	8000a38 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fe14 	bl	8000a38 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1d4      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ef      	beq.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
 8001e2c:	e01b      	b.n	8001e66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e34:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fdfb 	bl	8000a38 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e46:	f7fe fdf7 	bl	8000a38 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1b7      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ef      	bne.n	8001e46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80a6 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d118      	bne.n	8001ede <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fdbe 	bl	8000a38 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7fe fdba 	bl	8000a38 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e17a      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4d8>
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef6:	e029      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d115      	bne.n	8001f2c <HAL_RCC_OscConfig+0x50c>
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	4b9c      	ldr	r3, [pc, #624]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a9b      	ldr	r2, [pc, #620]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3c:	4b98      	ldr	r3, [pc, #608]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	4a97      	ldr	r2, [pc, #604]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7fe fd70 	bl	8000a38 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fd6c 	bl	8000a38 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e12a      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ed      	beq.n	8001f5c <HAL_RCC_OscConfig+0x53c>
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7fe fd59 	bl	8000a38 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fd55 	bl	8000a38 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e113      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ed      	bne.n	8001f8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	4a79      	ldr	r2, [pc, #484]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80fe 	beq.w	80021c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	f040 80d0 	bne.w	8002174 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fd4:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d130      	bne.n	800204a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d127      	bne.n	800204a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d11f      	bne.n	800204a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002014:	2a07      	cmp	r2, #7
 8002016:	bf14      	ite	ne
 8002018:	2201      	movne	r2, #1
 800201a:	2200      	moveq	r2, #0
 800201c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201e:	4293      	cmp	r3, r2
 8002020:	d113      	bne.n	800204a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	3b01      	subs	r3, #1
 8002030:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d109      	bne.n	800204a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d06e      	beq.n	8002128 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b0c      	cmp	r3, #12
 800204e:	d069      	beq.n	8002124 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0ad      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002078:	f7fe fcde 	bl	8000a38 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe fcda 	bl	8000a38 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e09a      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002092:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x784>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b8:	0212      	lsls	r2, r2, #8
 80020ba:	4311      	orrs	r1, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020c0:	0852      	lsrs	r2, r2, #1
 80020c2:	3a01      	subs	r2, #1
 80020c4:	0552      	lsls	r2, r2, #21
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020cc:	0852      	lsrs	r2, r2, #1
 80020ce:	3a01      	subs	r2, #1
 80020d0:	0652      	lsls	r2, r2, #25
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020d8:	0912      	lsrs	r2, r2, #4
 80020da:	0452      	lsls	r2, r2, #17
 80020dc:	430a      	orrs	r2, r1
 80020de:	4930      	ldr	r1, [pc, #192]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020fc:	f7fe fc9c 	bl	8000a38 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe fc98 	bl	8000a38 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e058      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002122:	e050      	b.n	80021c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e04f      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d148      	bne.n	80021c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800214c:	f7fe fc74 	bl	8000a38 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fc70 	bl	8000a38 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e030      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x734>
 8002172:	e028      	b.n	80021c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d023      	beq.n	80021c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_RCC_OscConfig+0x780>)
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fc57 	bl	8000a38 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e00c      	b.n	80021a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fc53 	bl	8000a38 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d905      	bls.n	80021a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e013      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ec      	bne.n	800218e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	4905      	ldr	r1, [pc, #20]	; (80021d0 <HAL_RCC_OscConfig+0x7b0>)
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x7b4>)
 80021bc:	4013      	ands	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
 80021c0:	e001      	b.n	80021c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	feeefffc 	.word	0xfeeefffc

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0e7      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d910      	bls.n	800221c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4970      	ldr	r1, [pc, #448]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b6e      	ldr	r3, [pc, #440]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0cf      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4b66      	ldr	r3, [pc, #408]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002234:	429a      	cmp	r2, r3
 8002236:	d908      	bls.n	800224a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4960      	ldr	r1, [pc, #384]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04c      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d121      	bne.n	80022ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0a6      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e09a      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228e:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e08e      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e086      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4943      	ldr	r1, [pc, #268]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe fbba 	bl	8000a38 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7fe fbb6 	bl	8000a38 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e06e      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	429a      	cmp	r2, r3
 800230a:	d208      	bcs.n	800231e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	492b      	ldr	r1, [pc, #172]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d210      	bcs.n	800234e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 0207 	bic.w	r2, r3, #7
 8002334:	4923      	ldr	r1, [pc, #140]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_ClockConfig+0x1ec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e036      	b.n	80023bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4910      	ldr	r1, [pc, #64]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238c:	f000 f824 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	490b      	ldr	r1, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x1f4>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1f8>)
 80023aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1fc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe faf1 	bl	8000998 <HAL_InitTick>
 80023b6:	4603      	mov	r3, r0
 80023b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ba:	7afb      	ldrb	r3, [r7, #11]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08003398 	.word	0x08003398
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f0:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x34>
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d121      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d11e      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d107      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e005      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002434:	4a2b      	ldr	r2, [pc, #172]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d102      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	e004      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d101      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800245c:	4b23      	ldr	r3, [pc, #140]	; (80024ec <HAL_RCC_GetSysClockFreq+0x114>)
 800245e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d134      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0xa6>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d003      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0xac>
 800247c:	e005      	b.n	800248a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002480:	617b      	str	r3, [r7, #20]
      break;
 8002482:	e005      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002486:	617b      	str	r3, [r7, #20]
      break;
 8002488:	e002      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	617b      	str	r3, [r7, #20]
      break;
 800248e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	3301      	adds	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	fb03 f202 	mul.w	r2, r3, r2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	0e5b      	lsrs	r3, r3, #25
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	3301      	adds	r3, #1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024d0:	69bb      	ldr	r3, [r7, #24]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	080033a8 	.word	0x080033a8
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	007a1200 	.word	0x007a1200

080024f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002508:	f7ff fa26 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 800250c:	6178      	str	r0, [r7, #20]
 800250e:	e014      	b.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251a:	6593      	str	r3, [r2, #88]	; 0x58
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002528:	f7ff fa16 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 800252c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d10b      	bne.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d919      	bls.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2ba0      	cmp	r3, #160	; 0xa0
 800254c:	d902      	bls.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254e:	2302      	movs	r3, #2
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	e013      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002554:	2301      	movs	r3, #1
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e010      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	d902      	bls.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002560:	2303      	movs	r3, #3
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	e00a      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d102      	bne.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256c:	2302      	movs	r3, #2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e004      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b70      	cmp	r3, #112	; 0x70
 8002576:	d101      	bne.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 0207 	bic.w	r2, r3, #7
 8002584:	4909      	ldr	r1, [pc, #36]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40022000 	.word	0x40022000

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d041      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025d4:	d02a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025da:	d824      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e6:	d81e      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f0:	d010      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f2:	e018      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f4:	4b86      	ldr	r3, [pc, #536]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a85      	ldr	r2, [pc, #532]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002600:	e015      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fabb 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002612:	e00c      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3320      	adds	r3, #32
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fba6 	bl	8002d6c <RCCEx_PLLSAI2_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002624:	e003      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	74fb      	strb	r3, [r7, #19]
      break;
 800262a:	e000      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800262c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002634:	4b76      	ldr	r3, [pc, #472]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002642:	4973      	ldr	r1, [pc, #460]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800264a:	e001      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d041      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002660:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002664:	d02a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266a:	d824      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800266c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002676:	d81e      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d010      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002682:	e018      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002684:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a61      	ldr	r2, [pc, #388]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002690:	e015      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fa73 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a2:	e00c      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3320      	adds	r3, #32
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fb5e 	bl	8002d6c <RCCEx_PLLSAI2_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b4:	e003      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	74fb      	strb	r3, [r7, #19]
      break;
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c4:	4b52      	ldr	r3, [pc, #328]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d2:	494f      	ldr	r1, [pc, #316]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026da:	e001      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a0 	beq.w	800282e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002708:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4a40      	ldr	r2, [pc, #256]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	; 0x58
 8002714:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002720:	2301      	movs	r3, #1
 8002722:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002730:	f7fe f982 	bl	8000a38 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002736:	e009      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7fe f97e 	bl	8000a38 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d902      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	74fb      	strb	r3, [r7, #19]
        break;
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ef      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d15c      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002768:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01f      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	d019      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe f93d 	bl	8000a38 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c0:	e00b      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7fe f939 	bl	8000a38 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d902      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	74fb      	strb	r3, [r7, #19]
            break;
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ec      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002806:	e009      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
 800280c:	e006      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281c:	7c7b      	ldrb	r3, [r7, #17]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a9d      	ldr	r2, [pc, #628]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283a:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f023 0203 	bic.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	4994      	ldr	r1, [pc, #592]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 020c 	bic.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	498c      	ldr	r1, [pc, #560]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800287e:	4b87      	ldr	r3, [pc, #540]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4983      	ldr	r1, [pc, #524]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	497b      	ldr	r1, [pc, #492]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	4972      	ldr	r1, [pc, #456]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e4:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	496a      	ldr	r1, [pc, #424]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	4961      	ldr	r1, [pc, #388]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002928:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	4959      	ldr	r1, [pc, #356]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294a:	4b54      	ldr	r3, [pc, #336]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	4950      	ldr	r1, [pc, #320]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800296c:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	4948      	ldr	r1, [pc, #288]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	493f      	ldr	r1, [pc, #252]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d028      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b0:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029be:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ce:	d106      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d0:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029da:	60d3      	str	r3, [r2, #12]
 80029dc:	e011      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f8c8 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	491f      	ldr	r1, [pc, #124]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a38:	60d3      	str	r3, [r2, #12]
 8002a3a:	e011      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f899 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a02      	ldr	r2, [pc, #8]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
 8002a98:	e014      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f867 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02f      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ade:	4928      	ldr	r1, [pc, #160]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f844 	bl	8002b84 <RCCEx_PLLSAI1_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d014      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
 8002b0a:	e011      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3320      	adds	r3, #32
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f925 	bl	8002d6c <RCCEx_PLLSAI2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4a:	490d      	ldr	r1, [pc, #52]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6e:	4904      	ldr	r1, [pc, #16]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b76:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000

08002b84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b92:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0203 	and.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10d      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d047      	beq.n	8002c5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e044      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d018      	beq.n	8002c0a <RCCEx_PLLSAI1_Config+0x86>
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d825      	bhi.n	8002c28 <RCCEx_PLLSAI1_Config+0xa4>
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d002      	beq.n	8002be6 <RCCEx_PLLSAI1_Config+0x62>
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d009      	beq.n	8002bf8 <RCCEx_PLLSAI1_Config+0x74>
 8002be4:	e020      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002be6:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11d      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf6:	e01a      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf8:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e013      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c0a:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c16:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c26:	e006      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2c:	e004      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e002      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10d      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	430b      	orrs	r3, r1
 8002c54:	4944      	ldr	r1, [pc, #272]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d17d      	bne.n	8002d5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6c:	f7fd fee4 	bl	8000a38 <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c72:	e009      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c74:	f7fd fee0 	bl	8000a38 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d902      	bls.n	8002c88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	73fb      	strb	r3, [r7, #15]
        break;
 8002c86:	e005      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c88:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ef      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d160      	bne.n	8002d5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d111      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6892      	ldr	r2, [r2, #8]
 8002cb0:	0211      	lsls	r1, r2, #8
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	0912      	lsrs	r2, r2, #4
 8002cb8:	0452      	lsls	r2, r2, #17
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	492a      	ldr	r1, [pc, #168]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	610b      	str	r3, [r1, #16]
 8002cc2:	e027      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d112      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	0211      	lsls	r1, r2, #8
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6912      	ldr	r2, [r2, #16]
 8002ce0:	0852      	lsrs	r2, r2, #1
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	0552      	lsls	r2, r2, #21
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	491f      	ldr	r1, [pc, #124]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	610b      	str	r3, [r1, #16]
 8002cee:	e011      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	0211      	lsls	r1, r2, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6952      	ldr	r2, [r2, #20]
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0652      	lsls	r2, r2, #25
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	4916      	ldr	r1, [pc, #88]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fd fe8a 	bl	8000a38 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d26:	e009      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d28:	f7fd fe86 	bl	8000a38 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	73fb      	strb	r3, [r7, #15]
          break;
 8002d3a:	e005      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ef      	beq.n	8002d28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	4904      	ldr	r1, [pc, #16]	; (8002d68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000

08002d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d018      	beq.n	8002db8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d86:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0203 	and.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10d      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
       ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
       ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d047      	beq.n	8002e42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e044      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d018      	beq.n	8002df2 <RCCEx_PLLSAI2_Config+0x86>
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d825      	bhi.n	8002e10 <RCCEx_PLLSAI2_Config+0xa4>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d002      	beq.n	8002dce <RCCEx_PLLSAI2_Config+0x62>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d009      	beq.n	8002de0 <RCCEx_PLLSAI2_Config+0x74>
 8002dcc:	e020      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dce:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dde:	e01a      	b.n	8002e16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df0:	e013      	b.n	8002e1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002df2:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfe:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0e:	e006      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e004      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	4939      	ldr	r1, [pc, #228]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d167      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a35      	ldr	r2, [pc, #212]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7fd fdf0 	bl	8000a38 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e5a:	e009      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e5c:	f7fd fdec 	bl	8000a38 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d902      	bls.n	8002e70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6e:	e005      	b.n	8002e7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e70:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ef      	bne.n	8002e5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d14a      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	0211      	lsls	r1, r2, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68d2      	ldr	r2, [r2, #12]
 8002e9e:	0912      	lsrs	r2, r2, #4
 8002ea0:	0452      	lsls	r2, r2, #17
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	491f      	ldr	r1, [pc, #124]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	614b      	str	r3, [r1, #20]
 8002eaa:	e011      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6892      	ldr	r2, [r2, #8]
 8002ebc:	0211      	lsls	r1, r2, #8
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6912      	ldr	r2, [r2, #16]
 8002ec2:	0852      	lsrs	r2, r2, #1
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0652      	lsls	r2, r2, #25
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	4916      	ldr	r1, [pc, #88]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd fdac 	bl	8000a38 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee2:	e009      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee4:	f7fd fda8 	bl	8000a38 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef6:	e005      	b.n	8002f04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4d0d      	ldr	r5, [pc, #52]	; (8002f60 <__libc_init_array+0x38>)
 8002f2c:	4c0d      	ldr	r4, [pc, #52]	; (8002f64 <__libc_init_array+0x3c>)
 8002f2e:	1b64      	subs	r4, r4, r5
 8002f30:	10a4      	asrs	r4, r4, #2
 8002f32:	2600      	movs	r6, #0
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	4d0b      	ldr	r5, [pc, #44]	; (8002f68 <__libc_init_array+0x40>)
 8002f3a:	4c0c      	ldr	r4, [pc, #48]	; (8002f6c <__libc_init_array+0x44>)
 8002f3c:	f000 f820 	bl	8002f80 <_init>
 8002f40:	1b64      	subs	r4, r4, r5
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	2600      	movs	r6, #0
 8002f46:	42a6      	cmp	r6, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f50:	4798      	blx	r3
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5a:	4798      	blx	r3
 8002f5c:	3601      	adds	r6, #1
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	080033d8 	.word	0x080033d8
 8002f64:	080033d8 	.word	0x080033d8
 8002f68:	080033d8 	.word	0x080033d8
 8002f6c:	080033dc 	.word	0x080033dc

08002f70 <memset>:
 8002f70:	4402      	add	r2, r0
 8002f72:	4603      	mov	r3, r0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d100      	bne.n	8002f7a <memset+0xa>
 8002f78:	4770      	bx	lr
 8002f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7e:	e7f9      	b.n	8002f74 <memset+0x4>

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
