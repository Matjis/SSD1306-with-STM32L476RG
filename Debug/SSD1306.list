
SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003308  08003308  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003308  08003308  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003308  08003308  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000000c  0800331c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800331c  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0d3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8e  00000000  00000000  0002a10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025607  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b68a  00000000  00000000  0005240f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4708  00000000  00000000  0005da99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001421a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025fc  00000000  00000000  001421f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eb0 	.word	0x08002eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002eb0 	.word	0x08002eb0

080001c8 <SSD1306_Initialise>:
#include "SSD1306.h"
#include "main.h"
#include <string.h> // where memset prototype can be found
#include "horse_anim.h"

uint8_t	SSD1306_Initialise(SSD1306_t *dev, I2C_HandleTypeDef *i2cHandle){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]

	// Set struct parameters
	dev->i2cHandle = i2cHandle;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	601a      	str	r2, [r3, #0]

	// Store number of transaction errors (returned at the end of the function)
	uint8_t errNum = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;


		status = SSD1306_WriteCommand(dev, SSD1306_REG_DISPLAY_OFF); //! Display off
 80001dc:	21ae      	movs	r1, #174	; 0xae
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f000 f8b2 	bl	8000348 <SSD1306_WriteCommand>
 80001e4:	4603      	mov	r3, r0
 80001e6:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xA8); //! Double byte command! Set multiplex ratio (1 to 64)
 80001e8:	21a8      	movs	r1, #168	; 0xa8
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f000 f8ac 	bl	8000348 <SSD1306_WriteCommand>
 80001f0:	4603      	mov	r3, r0
 80001f2:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x3F); //! Sets that picture on display starts from top, register name isn't given. Permitted entries are between 0x0F - 0x3f as per 0xA8 register describes. Smaller value sets screen start lower. As per datasheet Table 10-1 and 10-2 shows few options.
 80001f4:	213f      	movs	r1, #63	; 0x3f
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f000 f8a6 	bl	8000348 <SSD1306_WriteCommand>
 80001fc:	4603      	mov	r3, r0
 80001fe:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xD3); //! Double byte command! Set display offset
 8000200:	21d3      	movs	r1, #211	; 0xd3
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f000 f8a0 	bl	8000348 <SSD1306_WriteCommand>
 8000208:	4603      	mov	r3, r0
 800020a:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x00); //! After 0xD3 command the offset can be set with this command value. Value can range from 0x00 - 0x3F. Default value after RESET is 0x00.
 800020c:	2100      	movs	r1, #0
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f000 f89a 	bl	8000348 <SSD1306_WriteCommand>
 8000214:	4603      	mov	r3, r0
 8000216:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0x40); //! Set display start line. Value can range from 0x40 - 0x7F. 0x40 is equal to line 0 and 0x7F will be equal to line 63.
 8000218:	2140      	movs	r1, #64	; 0x40
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f894 	bl	8000348 <SSD1306_WriteCommand>
 8000220:	4603      	mov	r3, r0
 8000222:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xA1); // Set segment re-map 0 to 127. Value can be A0 or A1
 8000224:	21a1      	movs	r1, #161	; 0xa1
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f88e 	bl	8000348 <SSD1306_WriteCommand>
 800022c:	4603      	mov	r3, r0
 800022e:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0xC8); //! Set COM Output Scan Direction. Value can be C0 or C8.
 8000230:	21c8      	movs	r1, #200	; 0xc8
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f888 	bl	8000348 <SSD1306_WriteCommand>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xDA); //! Double byte command! Set COM pins hardware configuration
 800023c:	21da      	movs	r1, #218	; 0xda
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f000 f882 	bl	8000348 <SSD1306_WriteCommand>
 8000244:	4603      	mov	r3, r0
 8000246:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x12); // 0x12 uses 8 pages, if you set 0x02, than only 4 pages are represented on display
 8000248:	2112      	movs	r1, #18
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 f87c 	bl	8000348 <SSD1306_WriteCommand>
 8000250:	4603      	mov	r3, r0
 8000252:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0x81); //! Double byte command! Set contrast control register
 8000254:	2181      	movs	r1, #129	; 0x81
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f876 	bl	8000348 <SSD1306_WriteCommand>
 800025c:	4603      	mov	r3, r0
 800025e:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x7F); //! After 0x81 command this value sets contrast. Value can range from 0x00 - 0xFF. Default value after RESET is 0x7F.
 8000260:	217f      	movs	r1, #127	; 0x7f
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 f870 	bl	8000348 <SSD1306_WriteCommand>
 8000268:	4603      	mov	r3, r0
 800026a:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, SSD1306_REG_ENTIRE_DISPLAY_ON_RAM); //! Set display to take data from RAM or ignore RAM data and just be ON
 800026c:	21a4      	movs	r1, #164	; 0xa4
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f000 f86a 	bl	8000348 <SSD1306_WriteCommand>
 8000274:	4603      	mov	r3, r0
 8000276:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, SSD1306_REG_DISPLAY_NORMAL); //! Set display state to normal or inverse
 8000278:	21a6      	movs	r1, #166	; 0xa6
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f000 f864 	bl	8000348 <SSD1306_WriteCommand>
 8000280:	4603      	mov	r3, r0
 8000282:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0xD5); //! Double byte command! Set display clock divide ratio/oscillator frequency
 8000284:	21d5      	movs	r1, #213	; 0xd5
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f85e 	bl	8000348 <SSD1306_WriteCommand>
 800028c:	4603      	mov	r3, r0
 800028e:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0xF0); //! Consists of 2 parts: lower 2 bytes sets divide ratio, higher 2 bytes set oscillator frequency. Default value for divide ratio: 0x00, default value for oscillator frequency: 0x08. End value can be set this way (0x08 << 4) | 0x00 and then you get 0x80. How D5h values work can be seen in datasheet. Fosc is set to max value for speed purposes.
 8000290:	21f0      	movs	r1, #240	; 0xf0
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f000 f858 	bl	8000348 <SSD1306_WriteCommand>
 8000298:	4603      	mov	r3, r0
 800029a:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, 0x8D); //! Double byte command! Charge Pump Setting
 800029c:	218d      	movs	r1, #141	; 0x8d
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 f852 	bl	8000348 <SSD1306_WriteCommand>
 80002a4:	4603      	mov	r3, r0
 80002a6:	73bb      	strb	r3, [r7, #14]
		status = SSD1306_WriteCommand(dev, 0x14); //! Enable Charge Pump
 80002a8:	2114      	movs	r1, #20
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f84c 	bl	8000348 <SSD1306_WriteCommand>
 80002b0:	4603      	mov	r3, r0
 80002b2:	73bb      	strb	r3, [r7, #14]

		status = SSD1306_WriteCommand(dev, SSD1306_REG_DISPLAY_ON); //! Set entire display ON
 80002b4:	21af      	movs	r1, #175	; 0xaf
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f846 	bl	8000348 <SSD1306_WriteCommand>
 80002bc:	4603      	mov	r3, r0
 80002be:	73bb      	strb	r3, [r7, #14]

	errNum += (status != HAL_OK);
 80002c0:	7bbb      	ldrb	r3, [r7, #14]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	bf14      	ite	ne
 80002c6:	2301      	movne	r3, #1
 80002c8:	2300      	moveq	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	461a      	mov	r2, r3
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	4413      	add	r3, r2
 80002d2:	73fb      	strb	r3, [r7, #15]
	// Return number of errors (0 if successful initialisation)

	memset(dev->BUFFER, 0x12, sizeof(dev->BUFFER)); //
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3304      	adds	r3, #4
 80002d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002dc:	2112      	movs	r1, #18
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fdde 	bl	8002ea0 <memset>
	dev->BUFFER[16]= 0x10;
	dev->BUFFER[32]= 0x90;
	dev->BUFFER[127]= 0xBB; */
	//SSD1306_ScreenUpdate(dev);

	return errNum;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <SSD1306_ScreenUpdate>:

void SSD1306_ScreenUpdate(SSD1306_t *dev){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

	//SSD1306_GotoXY (0,0);*/

	for(uint8_t i=0; i < SSD1306_HEIGHT/8; i++){
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]
 80002fc:	e019      	b.n	8000332 <SSD1306_ScreenUpdate+0x42>

		SSD1306_WriteCommand(dev, 0xB0+i);	//	iterates through page start addresses
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	3b50      	subs	r3, #80	; 0x50
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f81e 	bl	8000348 <SSD1306_WriteCommand>
		SSD1306_WriteCommand(dev, 0x00);	// ??? can it be used without it?
 800030c:	2100      	movs	r1, #0
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f000 f81a 	bl	8000348 <SSD1306_WriteCommand>
		SSD1306_WriteCommand(dev, 0x10);	// ??? can it be used without it?
 8000314:	2110      	movs	r1, #16
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f816 	bl	8000348 <SSD1306_WriteCommand>
		//SSD1306_WriteData(dev, &dev->BUFFER[SSD1306_WIDTH*i]);
		SSD1306_WriteData(dev, &horse1[SSD1306_WIDTH*i]);
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	01db      	lsls	r3, r3, #7
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <SSD1306_ScreenUpdate+0x54>)
 8000322:	4413      	add	r3, r2
 8000324:	4619      	mov	r1, r3
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f827 	bl	800037a <SSD1306_WriteData>
	for(uint8_t i=0; i < SSD1306_HEIGHT/8; i++){
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	3301      	adds	r3, #1
 8000330:	73fb      	strb	r3, [r7, #15]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	2b07      	cmp	r3, #7
 8000336:	d9e2      	bls.n	80002fe <SSD1306_ScreenUpdate+0xe>
		//SSD1306_WriteData(dev, &CLOWN1[SSD1306_WIDTH*i]);

	}
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	08002ec8 	.word	0x08002ec8

08000348 <SSD1306_WriteCommand>:

	return HAL_I2C_Mem_Read(dev->i2cHandle, SSD1306_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}
*/

HAL_StatusTypeDef SSD1306_WriteCommand(SSD1306_t *dev, uint8_t command){
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af04      	add	r7, sp, #16
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	460b      	mov	r3, r1
 8000352:	70fb      	strb	r3, [r7, #3]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SSD1306_I2C_ADDR, SSD1306_COMMAND, I2C_MEMADD_SIZE_8BIT, &command, 1, HAL_MAX_DELAY);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	6818      	ldr	r0, [r3, #0]
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	9302      	str	r3, [sp, #8]
 800035e:	2301      	movs	r3, #1
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	1cfb      	adds	r3, r7, #3
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2301      	movs	r3, #1
 8000368:	2200      	movs	r2, #0
 800036a:	2178      	movs	r1, #120	; 0x78
 800036c:	f000 fe8e 	bl	800108c <HAL_I2C_Mem_Write>
 8000370:	4603      	mov	r3, r0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <SSD1306_WriteData>:

HAL_StatusTypeDef SSD1306_WriteData(SSD1306_t *dev, uint8_t *data){
 800037a:	b580      	push	{r7, lr}
 800037c:	b086      	sub	sp, #24
 800037e:	af04      	add	r7, sp, #16
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SSD1306_I2C_ADDR, SSD1306_DATA, I2C_MEMADD_SIZE_8BIT, data, SSD1306_WIDTH, HAL_MAX_DELAY);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6818      	ldr	r0, [r3, #0]
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	9302      	str	r3, [sp, #8]
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2301      	movs	r3, #1
 8000398:	2240      	movs	r2, #64	; 0x40
 800039a:	2178      	movs	r1, #120	; 0x78
 800039c:	f000 fe76 	bl	800108c <HAL_I2C_Mem_Write>
 80003a0:	4603      	mov	r3, r0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f000 fa71 	bl	8000896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f812 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f000 f8d2 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003bc:	f000 f854 	bl	8000468 <MX_I2C1_Init>
  MX_I2C2_Init();
 80003c0:	f000 f890 	bl	80004e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Initialise display
  SSD1306_Initialise(&disp, &hi2c2);
 80003c4:	4903      	ldr	r1, [pc, #12]	; (80003d4 <main+0x28>)
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <main+0x2c>)
 80003c8:	f7ff fefe 	bl	80001c8 <SSD1306_Initialise>
	 // ADXL345_ReadAccelerations(&acc); executable code

	  //SSD1306_Puts ("Embedded", &Font_7x10, 1);

	 //memset(&SSD1306_t->BUFFER, 0xFC, sizeof(&SSD1306_t->BUFFER)); // doesn't work?
	  SSD1306_ScreenUpdate(&disp);
 80003cc:	4802      	ldr	r0, [pc, #8]	; (80003d8 <main+0x2c>)
 80003ce:	f7ff ff8f 	bl	80002f0 <SSD1306_ScreenUpdate>
 80003d2:	e7fb      	b.n	80003cc <main+0x20>
 80003d4:	2000007c 	.word	0x2000007c
 80003d8:	200000d0 	.word	0x200000d0

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b096      	sub	sp, #88	; 0x58
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	2244      	movs	r2, #68	; 0x44
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fd58 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000402:	f001 fa4f 	bl	80018a4 <HAL_PWREx_ControlVoltageScaling>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800040c:	f000 f90a 	bl	8000624 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000410:	2310      	movs	r3, #16
 8000412:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800041c:	2360      	movs	r3, #96	; 0x60
 800041e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000420:	2300      	movs	r3, #0
 8000422:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fa91 	bl	8001950 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000434:	f000 f8f6 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800043c:	2300      	movs	r3, #0
 800043e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fe59 	bl	8002108 <HAL_RCC_ClockConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800045c:	f000 f8e2 	bl	8000624 <Error_Handler>
  }
}
 8000460:	bf00      	nop
 8000462:	3758      	adds	r7, #88	; 0x58
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_I2C1_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <MX_I2C1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_I2C1_Init+0x74>)
 8000474:	f640 6214 	movw	r2, #3604	; 0xe14
 8000478:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_I2C1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_I2C1_Init+0x74>)
 8000482:	2201      	movs	r2, #1
 8000484:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_I2C1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_I2C1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <MX_I2C1_Init+0x74>)
 80004a6:	f000 fd62 	bl	8000f6e <HAL_I2C_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004b0:	f000 f8b8 	bl	8000624 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b4:	2100      	movs	r1, #0
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <MX_I2C1_Init+0x74>)
 80004b8:	f001 f94e 	bl	8001758 <HAL_I2CEx_ConfigAnalogFilter>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80004c2:	f000 f8af 	bl	8000624 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_I2C1_Init+0x74>)
 80004ca:	f001 f990 	bl	80017ee <HAL_I2CEx_ConfigDigitalFilter>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80004d4:	f000 f8a6 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000028 	.word	0x20000028
 80004e0:	40005400 	.word	0x40005400

080004e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_I2C2_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_I2C2_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_I2C2_Init+0x74>)
 80004f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80004f4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_I2C2_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_I2C2_Init+0x74>)
 80004fe:	2201      	movs	r2, #1
 8000500:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_I2C2_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_I2C2_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_I2C2_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_I2C2_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_I2C2_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <MX_I2C2_Init+0x74>)
 8000522:	f000 fd24 	bl	8000f6e <HAL_I2C_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800052c:	f000 f87a 	bl	8000624 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000530:	2100      	movs	r1, #0
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <MX_I2C2_Init+0x74>)
 8000534:	f001 f910 	bl	8001758 <HAL_I2CEx_ConfigAnalogFilter>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800053e:	f000 f871 	bl	8000624 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000542:	2100      	movs	r1, #0
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_I2C2_Init+0x74>)
 8000546:	f001 f952 	bl	80017ee <HAL_I2CEx_ConfigDigitalFilter>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 f868 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000007c 	.word	0x2000007c
 800055c:	40005800 	.word	0x40005800

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <MX_GPIO_Init+0xbc>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a28      	ldr	r2, [pc, #160]	; (800061c <MX_GPIO_Init+0xbc>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_GPIO_Init+0xbc>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <MX_GPIO_Init+0xbc>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a22      	ldr	r2, [pc, #136]	; (800061c <MX_GPIO_Init+0xbc>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <MX_GPIO_Init+0xbc>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_GPIO_Init+0xbc>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <MX_GPIO_Init+0xbc>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_GPIO_Init+0xbc>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <MX_GPIO_Init+0xc0>)
 80005c4:	f000 fc98 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_INT2_Pin */
  GPIO_InitStruct.Pin = A_INT2_Pin;
 80005c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A_INT2_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f000 fadf 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <MX_GPIO_Init+0xc0>)
 80005fe:	f000 fad1 	bl	8000ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2017      	movs	r0, #23
 8000608:	f000 fa95 	bl	8000b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800060c:	2017      	movs	r0, #23
 800060e:	f000 faae 	bl	8000b6e <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x44>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x44>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6613      	str	r3, [r2, #96]	; 0x60
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x44>)
 8000644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x44>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_MspInit+0x44>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	6593      	str	r3, [r2, #88]	; 0x58
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_MspInit+0x44>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0ae      	sub	sp, #184	; 0xb8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	2288      	movs	r2, #136	; 0x88
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fc01 	bl	8002ea0 <memset>
  if(hi2c->Instance==I2C1)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <HAL_I2C_MspInit+0x134>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d13c      	bne.n	8000722 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ff13 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006c0:	f7ff ffb0 	bl	8000624 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c8:	4a39      	ldr	r2, [pc, #228]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e4:	2312      	movs	r3, #18
 80006e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f6:	2304      	movs	r3, #4
 80006f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000700:	4619      	mov	r1, r3
 8000702:	482c      	ldr	r0, [pc, #176]	; (80007b4 <HAL_I2C_MspInit+0x13c>)
 8000704:	f000 fa4e 	bl	8000ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 800070e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000712:	6593      	str	r3, [r2, #88]	; 0x58
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000720:	e040      	b.n	80007a4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <HAL_I2C_MspInit+0x140>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d13b      	bne.n	80007a4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fed1 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000744:	f7ff ff6e 	bl	8000624 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074c:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000760:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	2301      	movs	r3, #1
 8000770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800077a:	2304      	movs	r3, #4
 800077c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000784:	4619      	mov	r1, r3
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <HAL_I2C_MspInit+0x13c>)
 8000788:	f000 fa0c 	bl	8000ba4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 8000792:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000796:	6593      	str	r3, [r2, #88]	; 0x58
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_I2C_MspInit+0x138>)
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	bf00      	nop
 80007a6:	37b8      	adds	r7, #184	; 0xb8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400
 80007b8:	40005800 	.word	0x40005800

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f89a 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_INT2_Pin);
 8000814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000818:	f000 fb86 	bl	8000f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800087c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff ffea 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f002 faf1 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000876:	f7ff fd99 	bl	80003ac <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800087c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000888:	08003310 	.word	0x08003310
  ldr r2, =_sbss
 800088c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000890:	200004d8 	.word	0x200004d8

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>

08000896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f93d 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f80e 	bl	80008c8 <HAL_InitTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b8:	f7ff feba 	bl	8000630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_InitTick+0x6c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d023      	beq.n	8000924 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_InitTick+0x70>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_InitTick+0x6c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f949 	bl	8000b8a <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10f      	bne.n	800091e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d809      	bhi.n	8000918 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f913 	bl	8000b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_InitTick+0x74>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e007      	b.n	8000928 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e001      	b.n	8000928 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	20000000 	.word	0x20000000
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	200004d4 	.word	0x200004d4

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200004d4 	.word	0x200004d4

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff29 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff3e 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff31 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffa2 	bl	8000adc <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	e17f      	b.n	8000eb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8171 	beq.w	8000eae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d005      	beq.n	8000be4 <HAL_GPIO_Init+0x40>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d130      	bne.n	8000c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0201 	and.w	r2, r3, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d118      	bne.n	8000c84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d017      	beq.n	8000cc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d123      	bne.n	8000d14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0203 	and.w	r2, r3, #3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80ac 	beq.w	8000eae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b5f      	ldr	r3, [pc, #380]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a5e      	ldr	r2, [pc, #376]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d6e:	4a5a      	ldr	r2, [pc, #360]	; (8000ed8 <HAL_GPIO_Init+0x334>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d98:	d025      	beq.n	8000de6 <HAL_GPIO_Init+0x242>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x338>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x23e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <HAL_GPIO_Init+0x33c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x23a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x340>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x236>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <HAL_GPIO_Init+0x344>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x232>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x348>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x22e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x34c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x22a>
 8000dca:	2306      	movs	r3, #6
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000de6:	2300      	movs	r3, #0
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df8:	4937      	ldr	r1, [pc, #220]	; (8000ed8 <HAL_GPIO_Init+0x334>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e2a:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f47f ae78 	bne.w	8000bb4 <HAL_GPIO_Init+0x10>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	48000c00 	.word	0x48000c00
 8000ee8:	48001000 	.word	0x48001000
 8000eec:	48001400 	.word	0x48001400
 8000ef0:	48001800 	.word	0x48001800
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f806 	bl	8000f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d101      	bne.n	8000f80 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e081      	b.n	8001084 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d106      	bne.n	8000f9a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fb6f 	bl	8000678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2224      	movs	r2, #36	; 0x24
 8000f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d107      	bne.n	8000fe8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	e006      	b.n	8000ff6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ff4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d104      	bne.n	8001008 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001006:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800102a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69d9      	ldr	r1, [r3, #28]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1a      	ldr	r2, [r3, #32]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 0201 	orr.w	r2, r2, #1
 8001064:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2220      	movs	r2, #32
 8001070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4603      	mov	r3, r0
 800109c:	817b      	strh	r3, [r7, #10]
 800109e:	460b      	mov	r3, r1
 80010a0:	813b      	strh	r3, [r7, #8]
 80010a2:	4613      	mov	r3, r2
 80010a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b20      	cmp	r3, #32
 80010b0:	f040 80f9 	bne.w	80012a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <HAL_I2C_Mem_Write+0x34>
 80010ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d105      	bne.n	80010cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0ed      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_I2C_Mem_Write+0x4e>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e0e6      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010e2:	f7ff fc41 	bl	8000968 <HAL_GetTick>
 80010e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2319      	movs	r3, #25
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f955 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0d1      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2221      	movs	r2, #33	; 0x21
 8001108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a3a      	ldr	r2, [r7, #32]
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800112c:	88f8      	ldrh	r0, [r7, #6]
 800112e:	893a      	ldrh	r2, [r7, #8]
 8001130:	8979      	ldrh	r1, [r7, #10]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4603      	mov	r3, r0
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 f8b9 	bl	80012b4 <I2C_RequestMemoryWrite>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0a9      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001158:	b29b      	uxth	r3, r3
 800115a:	2bff      	cmp	r3, #255	; 0xff
 800115c:	d90e      	bls.n	800117c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	22ff      	movs	r2, #255	; 0xff
 8001162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001168:	b2da      	uxtb	r2, r3
 800116a:	8979      	ldrh	r1, [r7, #10]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 fabd 	bl	80016f4 <I2C_TransferConfig>
 800117a:	e00f      	b.n	800119c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118a:	b2da      	uxtb	r2, r3
 800118c:	8979      	ldrh	r1, [r7, #10]
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 faac 	bl	80016f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f93f 	bl	8001424 <I2C_WaitOnTXISFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e07b      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d034      	beq.n	8001254 <HAL_I2C_Mem_Write+0x1c8>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d130      	bne.n	8001254 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	2200      	movs	r2, #0
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 f8d1 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e04d      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d90e      	bls.n	8001234 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	22ff      	movs	r2, #255	; 0xff
 800121a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	b2da      	uxtb	r2, r3
 8001222:	8979      	ldrh	r1, [r7, #10]
 8001224:	2300      	movs	r3, #0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 fa61 	bl	80016f4 <I2C_TransferConfig>
 8001232:	e00f      	b.n	8001254 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001242:	b2da      	uxtb	r2, r3
 8001244:	8979      	ldrh	r1, [r7, #10]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fa50 	bl	80016f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001258:	b29b      	uxth	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d19e      	bne.n	800119c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f91e 	bl	80014a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e01a      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2220      	movs	r2, #32
 8001278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_I2C_Mem_Write+0x224>)
 8001286:	400b      	ands	r3, r1
 8001288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2220      	movs	r2, #32
 800128e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
  }
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	fe00e800 	.word	0xfe00e800

080012b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	817b      	strh	r3, [r7, #10]
 80012c6:	460b      	mov	r3, r1
 80012c8:	813b      	strh	r3, [r7, #8]
 80012ca:	4613      	mov	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	8979      	ldrh	r1, [r7, #10]
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <I2C_RequestMemoryWrite+0xa4>)
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fa09 	bl	80016f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f89c 	bl	8001424 <I2C_WaitOnTXISFlagUntilTimeout>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e02c      	b.n	8001350 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d105      	bne.n	8001308 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012fc:	893b      	ldrh	r3, [r7, #8]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
 8001306:	e015      	b.n	8001334 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001308:	893b      	ldrh	r3, [r7, #8]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	69b9      	ldr	r1, [r7, #24]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f882 	bl	8001424 <I2C_WaitOnTXISFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e012      	b.n	8001350 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2200      	movs	r2, #0
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f830 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	80002000 	.word	0x80002000

0800135c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b02      	cmp	r3, #2
 8001370:	d103      	bne.n	800137a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b01      	cmp	r3, #1
 8001386:	d007      	beq.n	8001398 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	619a      	str	r2, [r3, #24]
  }
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013b4:	e022      	b.n	80013fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d01e      	beq.n	80013fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013be:	f7ff fad3 	bl	8000968 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d302      	bcc.n	80013d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d113      	bne.n	80013fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f043 0220 	orr.w	r2, r3, #32
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2220      	movs	r2, #32
 80013e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e00f      	b.n	800141c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	4013      	ands	r3, r2
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	429a      	cmp	r2, r3
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	429a      	cmp	r2, r3
 8001418:	d0cd      	beq.n	80013b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001430:	e02c      	b.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f870 	bl	800151c <I2C_IsErrorOccurred>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e02a      	b.n	800149c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01e      	beq.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800144e:	f7ff fa8b 	bl	8000968 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d113      	bne.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f043 0220 	orr.w	r2, r3, #32
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2220      	movs	r2, #32
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e007      	b.n	800149c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b02      	cmp	r3, #2
 8001498:	d1cb      	bne.n	8001432 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014b0:	e028      	b.n	8001504 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f830 	bl	800151c <I2C_IsErrorOccurred>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e026      	b.n	8001514 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c6:	f7ff fa4f 	bl	8000968 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d113      	bne.n	8001504 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	f043 0220 	orr.w	r2, r3, #32
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2220      	movs	r2, #32
 80014ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e007      	b.n	8001514 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	2b20      	cmp	r3, #32
 8001510:	d1cf      	bne.n	80014b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d075      	beq.n	8001634 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2210      	movs	r2, #16
 800154e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001550:	e056      	b.n	8001600 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d052      	beq.n	8001600 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800155a:	f7ff fa05 	bl	8000968 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	429a      	cmp	r2, r3
 8001568:	d302      	bcc.n	8001570 <I2C_IsErrorOccurred+0x54>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d147      	bne.n	8001600 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001582:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001592:	d12e      	bne.n	80015f2 <I2C_IsErrorOccurred+0xd6>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800159a:	d02a      	beq.n	80015f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d027      	beq.n	80015f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015b2:	f7ff f9d9 	bl	8000968 <HAL_GetTick>
 80015b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b8:	e01b      	b.n	80015f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015ba:	f7ff f9d5 	bl	8000968 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b19      	cmp	r3, #25
 80015c6:	d914      	bls.n	80015f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f043 0220 	orr.w	r2, r3, #32
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d1dc      	bne.n	80015ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b20      	cmp	r3, #32
 800160c:	d003      	beq.n	8001616 <I2C_IsErrorOccurred+0xfa>
 800160e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001612:	2b00      	cmp	r3, #0
 8001614:	d09d      	beq.n	8001552 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2220      	movs	r2, #32
 8001624:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80016a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d01c      	beq.n	80016e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fe56 	bl	800135c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <I2C_IsErrorOccurred+0x1d4>)
 80016bc:	400b      	ands	r3, r1
 80016be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	fe00e800 	.word	0xfe00e800

080016f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	817b      	strh	r3, [r7, #10]
 8001702:	4613      	mov	r3, r2
 8001704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800170c:	7a7b      	ldrb	r3, [r7, #9]
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001714:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	4313      	orrs	r3, r2
 800171e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001722:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	0d5b      	lsrs	r3, r3, #21
 800172e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <I2C_TransferConfig+0x60>)
 8001734:	430b      	orrs	r3, r1
 8001736:	43db      	mvns	r3, r3
 8001738:	ea02 0103 	and.w	r1, r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	03ff63ff 	.word	0x03ff63ff

08001758 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	d138      	bne.n	80017e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001778:	2302      	movs	r3, #2
 800177a:	e032      	b.n	80017e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	; 0x24
 8001788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
  }
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b20      	cmp	r3, #32
 8001802:	d139      	bne.n	8001878 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800180e:	2302      	movs	r3, #2
 8001810:	e033      	b.n	800187a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2224      	movs	r2, #36	; 0x24
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001840:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
  }
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b2:	d130      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c0:	d038      	beq.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ca:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2232      	movs	r2, #50	; 0x32
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9b      	lsrs	r3, r3, #18
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e8:	e002      	b.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fc:	d102      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f2      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001910:	d110      	bne.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e00f      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d007      	beq.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40007000 	.word	0x40007000
 8001948:	20000000 	.word	0x20000000
 800194c:	431bde83 	.word	0x431bde83

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e3ca      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001962:	4b97      	ldr	r3, [pc, #604]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800196c:	4b94      	ldr	r3, [pc, #592]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80e4 	beq.w	8001b4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_RCC_OscConfig+0x4a>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	f040 808b 	bne.w	8001aa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b01      	cmp	r3, #1
 8001996:	f040 8087 	bne.w	8001aa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800199a:	4b89      	ldr	r3, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x62>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e3a2      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <HAL_RCC_OscConfig+0x7c>
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ca:	e005      	b.n	80019d8 <HAL_RCC_OscConfig+0x88>
 80019cc:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d8:	4293      	cmp	r3, r2
 80019da:	d223      	bcs.n	8001a24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fd1d 	bl	8002420 <RCC_SetFlashLatencyFromMSIRange>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e383      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	496d      	ldr	r1, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0e:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	4968      	ldr	r1, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
 8001a22:	e025      	b.n	8001a70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4960      	ldr	r1, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a42:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	495b      	ldr	r1, [pc, #364]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fcdd 	bl	8002420 <RCC_SetFlashLatencyFromMSIRange>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e343      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a70:	f000 fc4a 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4950      	ldr	r1, [pc, #320]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_RCC_OscConfig+0x278>)
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a90:	4b4e      	ldr	r3, [pc, #312]	; (8001bcc <HAL_RCC_OscConfig+0x27c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe ff17 	bl	80008c8 <HAL_InitTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d052      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	e327      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d032      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ab0:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a42      	ldr	r2, [pc, #264]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001abc:	f7fe ff54 	bl	8000968 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac4:	f7fe ff50 	bl	8000968 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e310      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a36      	ldr	r2, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4931      	ldr	r1, [pc, #196]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	492c      	ldr	r1, [pc, #176]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
 8001b14:	e01a      	b.n	8001b4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b22:	f7fe ff21 	bl	8000968 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2a:	f7fe ff1d 	bl	8000968 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e2dd      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x1da>
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d074      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x21a>
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d10e      	bne.n	8001b82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d10b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d064      	beq.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d160      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e2ba      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x24a>
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e026      	b.n	8001be8 <HAL_RCC_OscConfig+0x298>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba2:	d115      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x280>
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a02      	ldr	r2, [pc, #8]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_OscConfig+0x298>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	080032c8 	.word	0x080032c8
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a9f      	ldr	r2, [pc, #636]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b9d      	ldr	r3, [pc, #628]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a9c      	ldr	r2, [pc, #624]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7fe feba 	bl	8000968 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7fe feb6 	bl	8000968 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e276      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0a:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x2a8>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe fea6 	bl	8000968 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7fe fea2 	bl	8000968 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e262      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c32:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x2d0>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d060      	beq.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_OscConfig+0x310>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d119      	bne.n	8001c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d116      	bne.n	8001c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c60:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_OscConfig+0x328>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e23f      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	4973      	ldr	r1, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8c:	e040      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d023      	beq.n	8001cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fe61 	bl	8000968 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7fe fe5d 	bl	8000968 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e21d      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbc:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	495f      	ldr	r1, [pc, #380]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e018      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7fe fe3d 	bl	8000968 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7fe fe39 	bl	8000968 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1f9      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7fe fe18 	bl	8000968 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fe14 	bl	8000968 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1d4      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4e:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ef      	beq.n	8001d3c <HAL_RCC_OscConfig+0x3ec>
 8001d5c:	e01b      	b.n	8001d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d64:	4a3b      	ldr	r2, [pc, #236]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fdfb 	bl	8000968 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7fe fdf7 	bl	8000968 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1b7      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d88:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80a6 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_RCC_OscConfig+0x508>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d118      	bne.n	8001e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCC_OscConfig+0x508>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x508>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de8:	f7fe fdbe 	bl	8000968 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7fe fdba 	bl	8000968 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e17a      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_RCC_OscConfig+0x508>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4d8>
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e26:	e029      	b.n	8001e7c <HAL_RCC_OscConfig+0x52c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d115      	bne.n	8001e5c <HAL_RCC_OscConfig+0x50c>
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e46:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x52c>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	4b9c      	ldr	r3, [pc, #624]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	4a9b      	ldr	r2, [pc, #620]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e6c:	4b98      	ldr	r3, [pc, #608]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a97      	ldr	r2, [pc, #604]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d016      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe fd70 	bl	8000968 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe fd6c 	bl	8000968 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e12a      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	4b8b      	ldr	r3, [pc, #556]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ed      	beq.n	8001e8c <HAL_RCC_OscConfig+0x53c>
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fd59 	bl	8000968 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fd55 	bl	8000968 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e113      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ed      	bne.n	8001eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a79      	ldr	r2, [pc, #484]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80fe 	beq.w	80020f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	f040 80d0 	bne.w	80020a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f04:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d130      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	3b01      	subs	r3, #1
 8001f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d127      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d11f      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f44:	2a07      	cmp	r2, #7
 8001f46:	bf14      	ite	ne
 8001f48:	2201      	movne	r2, #1
 8001f4a:	2200      	moveq	r2, #0
 8001f4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d113      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d06e      	beq.n	8002058 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d069      	beq.n	8002054 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0ad      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4b      	ldr	r2, [pc, #300]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa8:	f7fe fcde 	bl	8000968 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fcda 	bl	8000968 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e09a      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fce:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_OscConfig+0x784>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fde:	3a01      	subs	r2, #1
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	4311      	orrs	r1, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fe8:	0212      	lsls	r2, r2, #8
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff0:	0852      	lsrs	r2, r2, #1
 8001ff2:	3a01      	subs	r2, #1
 8001ff4:	0552      	lsls	r2, r2, #21
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ffc:	0852      	lsrs	r2, r2, #1
 8001ffe:	3a01      	subs	r2, #1
 8002000:	0652      	lsls	r2, r2, #25
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002008:	0912      	lsrs	r2, r2, #4
 800200a:	0452      	lsls	r2, r2, #17
 800200c:	430a      	orrs	r2, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002014:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800202c:	f7fe fc9c 	bl	8000968 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fc98 	bl	8000968 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e058      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002052:	e050      	b.n	80020f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e04f      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d148      	bne.n	80020f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800207c:	f7fe fc74 	bl	8000968 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe fc70 	bl	8000968 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e030      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x734>
 80020a2:	e028      	b.n	80020f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d023      	beq.n	80020f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_RCC_OscConfig+0x780>)
 80020b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fc57 	bl	8000968 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020bc:	e00c      	b.n	80020d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe fc53 	bl	8000968 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d905      	bls.n	80020d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e013      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
 80020d0:	40021000 	.word	0x40021000
 80020d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0x7b0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ec      	bne.n	80020be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x7b0>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	4905      	ldr	r1, [pc, #20]	; (8002100 <HAL_RCC_OscConfig+0x7b0>)
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x7b4>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
 80020f0:	e001      	b.n	80020f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	feeefffc 	.word	0xfeeefffc

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0e7      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4970      	ldr	r1, [pc, #448]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cf      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4960      	ldr	r1, [pc, #384]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04c      	beq.n	8002220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218e:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d121      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0a6      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d115      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e09a      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021be:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e08e      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e086      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4943      	ldr	r1, [pc, #268]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f0:	f7fe fbba 	bl	8000968 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe fbb6 	bl	8000968 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e06e      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002238:	429a      	cmp	r2, r3
 800223a:	d208      	bcs.n	800224e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	492b      	ldr	r1, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d210      	bcs.n	800227e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 0207 	bic.w	r2, r3, #7
 8002264:	4923      	ldr	r1, [pc, #140]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e036      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4918      	ldr	r1, [pc, #96]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4910      	ldr	r1, [pc, #64]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022bc:	f000 f824 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	490b      	ldr	r1, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x1f4>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1f8>)
 80022da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1fc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe faf1 	bl	80008c8 <HAL_InitTick>
 80022e6:	4603      	mov	r3, r0
 80022e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40021000 	.word	0x40021000
 80022fc:	080032c8 	.word	0x080032c8
 8002300:	20000000 	.word	0x20000000
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x34>
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d121      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d11e      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e005      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d102      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_GetSysClockFreq+0x110>)
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e004      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d101      	bne.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800238c:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCC_GetSysClockFreq+0x114>)
 800238e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d134      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0xa6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d003      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0xac>
 80023ac:	e005      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b0:	617b      	str	r3, [r7, #20]
      break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_GetSysClockFreq+0x114>)
 80023b6:	617b      	str	r3, [r7, #20]
      break;
 80023b8:	e002      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	617b      	str	r3, [r7, #20]
      break;
 80023be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	3301      	adds	r3, #1
 80023cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	0e5b      	lsrs	r3, r3, #25
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	3301      	adds	r3, #1
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002400:	69bb      	ldr	r3, [r7, #24]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	080032d8 	.word	0x080032d8
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002438:	f7ff fa26 	bl	8001888 <HAL_PWREx_GetVoltageRange>
 800243c:	6178      	str	r0, [r7, #20]
 800243e:	e014      	b.n	800246a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002458:	f7ff fa16 	bl	8001888 <HAL_PWREx_GetVoltageRange>
 800245c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002470:	d10b      	bne.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d919      	bls.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2ba0      	cmp	r3, #160	; 0xa0
 800247c:	d902      	bls.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800247e:	2302      	movs	r3, #2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e013      	b.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002484:	2301      	movs	r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e010      	b.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d902      	bls.n	8002496 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002490:	2303      	movs	r3, #3
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e00a      	b.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d102      	bne.n	80024a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800249c:	2302      	movs	r3, #2
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e004      	b.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b70      	cmp	r3, #112	; 0x70
 80024a6:	d101      	bne.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 0207 	bic.w	r2, r3, #7
 80024b4:	4909      	ldr	r1, [pc, #36]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d001      	beq.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d041      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002504:	d02a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002506:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800250a:	d824      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800250c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002516:	d81e      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800251c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002520:	d010      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002522:	e018      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002524:	4b86      	ldr	r3, [pc, #536]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a85      	ldr	r2, [pc, #532]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002530:	e015      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fabb 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002542:	e00c      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3320      	adds	r3, #32
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fba6 	bl	8002c9c <RCCEx_PLLSAI2_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002554:	e003      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	74fb      	strb	r3, [r7, #19]
      break;
 800255a:	e000      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800255c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002572:	4973      	ldr	r1, [pc, #460]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800257a:	e001      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d041      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002590:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002594:	d02a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002596:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800259a:	d824      	bhi.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800259c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a6:	d81e      	bhi.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b0:	d010      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025b2:	e018      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b4:	4b62      	ldr	r3, [pc, #392]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a61      	ldr	r2, [pc, #388]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c0:	e015      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa73 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80025ce:	4603      	mov	r3, r0
 80025d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d2:	e00c      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3320      	adds	r3, #32
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fb5e 	bl	8002c9c <RCCEx_PLLSAI2_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e4:	e003      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ea:	e000      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f4:	4b52      	ldr	r3, [pc, #328]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002602:	494f      	ldr	r1, [pc, #316]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a0 	beq.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
 8002644:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002650:	2301      	movs	r3, #1
 8002652:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3a      	ldr	r2, [pc, #232]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002660:	f7fe f982 	bl	8000968 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002666:	e009      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe f97e 	bl	8000968 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	74fb      	strb	r3, [r7, #19]
        break;
 800267a:	e005      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15c      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002698:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01f      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d019      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe f93d 	bl	8000968 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f0:	e00b      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe f939 	bl	8000968 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d902      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	74fb      	strb	r3, [r7, #19]
            break;
 8002708:	e006      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ec      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272e:	4904      	ldr	r1, [pc, #16]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002736:	e009      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
 800273c:	e006      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274c:	7c7b      	ldrb	r3, [r7, #17]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a9d      	ldr	r2, [pc, #628]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276a:	4b98      	ldr	r3, [pc, #608]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f023 0203 	bic.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	4994      	ldr	r1, [pc, #592]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800278c:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 020c 	bic.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	498c      	ldr	r1, [pc, #560]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ae:	4b87      	ldr	r3, [pc, #540]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4983      	ldr	r1, [pc, #524]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	497b      	ldr	r1, [pc, #492]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	4972      	ldr	r1, [pc, #456]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002814:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	496a      	ldr	r1, [pc, #424]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	4961      	ldr	r1, [pc, #388]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002858:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002866:	4959      	ldr	r1, [pc, #356]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287a:	4b54      	ldr	r3, [pc, #336]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002888:	4950      	ldr	r1, [pc, #320]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	4948      	ldr	r1, [pc, #288]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028be:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	493f      	ldr	r1, [pc, #252]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d028      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e0:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ee:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fe:	d106      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290a:	60d3      	str	r3, [r2, #12]
 800290c:	e011      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002916:	d10c      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	2101      	movs	r1, #1
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f8c8 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d028      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	491f      	ldr	r1, [pc, #124]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800295c:	d106      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002968:	60d3      	str	r3, [r2, #12]
 800296a:	e011      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002974:	d10c      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f899 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02b      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ba:	d109      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a02      	ldr	r2, [pc, #8]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c6:	60d3      	str	r3, [r2, #12]
 80029c8:	e014      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3304      	adds	r3, #4
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f867 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02f      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0e:	4928      	ldr	r1, [pc, #160]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f844 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d014      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	74bb      	strb	r3, [r7, #18]
 8002a3a:	e011      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3320      	adds	r3, #32
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f925 	bl	8002c9c <RCCEx_PLLSAI2_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a7a:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9e:	4904      	ldr	r1, [pc, #16]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ac2:	4b75      	ldr	r3, [pc, #468]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d018      	beq.n	8002b00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10d      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ae6:	4b6c      	ldr	r3, [pc, #432]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
       ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d047      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e044      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d018      	beq.n	8002b3a <RCCEx_PLLSAI1_Config+0x86>
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d825      	bhi.n	8002b58 <RCCEx_PLLSAI1_Config+0xa4>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d002      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0x62>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d009      	beq.n	8002b28 <RCCEx_PLLSAI1_Config+0x74>
 8002b14:	e020      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b16:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11d      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b26:	e01a      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b28:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e013      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b56:	e006      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e004      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4944      	ldr	r1, [pc, #272]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d17d      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a40      	ldr	r2, [pc, #256]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fd fee4 	bl	8000968 <HAL_GetTick>
 8002ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba2:	e009      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba4:	f7fd fee0 	bl	8000968 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb6:	e005      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ef      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d160      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d111      	bne.n	8002bf4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	0912      	lsrs	r2, r2, #4
 8002be8:	0452      	lsls	r2, r2, #17
 8002bea:	430a      	orrs	r2, r1
 8002bec:	492a      	ldr	r1, [pc, #168]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	610b      	str	r3, [r1, #16]
 8002bf2:	e027      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d112      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	0211      	lsls	r1, r2, #8
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6912      	ldr	r2, [r2, #16]
 8002c10:	0852      	lsrs	r2, r2, #1
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0552      	lsls	r2, r2, #21
 8002c16:	430a      	orrs	r2, r1
 8002c18:	491f      	ldr	r1, [pc, #124]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	610b      	str	r3, [r1, #16]
 8002c1e:	e011      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	0211      	lsls	r1, r2, #8
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6952      	ldr	r2, [r2, #20]
 8002c36:	0852      	lsrs	r2, r2, #1
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0652      	lsls	r2, r2, #25
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	4916      	ldr	r1, [pc, #88]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fd fe8a 	bl	8000968 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c56:	e009      	b.n	8002c6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c58:	f7fd fe86 	bl	8000968 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d902      	bls.n	8002c6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	73fb      	strb	r3, [r7, #15]
          break;
 8002c6a:	e005      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	4904      	ldr	r1, [pc, #16]	; (8002c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000

08002c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002caa:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cb6:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10d      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cce:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d047      	beq.n	8002d72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e044      	b.n	8002d72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d018      	beq.n	8002d22 <RCCEx_PLLSAI2_Config+0x86>
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d825      	bhi.n	8002d40 <RCCEx_PLLSAI2_Config+0xa4>
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <RCCEx_PLLSAI2_Config+0x62>
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d009      	beq.n	8002d10 <RCCEx_PLLSAI2_Config+0x74>
 8002cfc:	e020      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cfe:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11d      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0e:	e01a      	b.n	8002d46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d116      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e013      	b.n	8002d4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d22:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d2e:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d3e:	e006      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e004      	b.n	8002d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d46:	bf00      	nop
 8002d48:	e002      	b.n	8002d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	4939      	ldr	r1, [pc, #228]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d167      	bne.n	8002e48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fd fdf0 	bl	8000968 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d8c:	f7fd fdec 	bl	8000968 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da0:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ef      	bne.n	8002d8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d14a      	bne.n	8002e48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d111      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	0912      	lsrs	r2, r2, #4
 8002dd0:	0452      	lsls	r2, r2, #17
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	491f      	ldr	r1, [pc, #124]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	614b      	str	r3, [r1, #20]
 8002dda:	e011      	b.n	8002e00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	0211      	lsls	r1, r2, #8
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6912      	ldr	r2, [r2, #16]
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0652      	lsls	r2, r2, #25
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4916      	ldr	r1, [pc, #88]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fd fdac 	bl	8000968 <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e14:	f7fd fda8 	bl	8000968 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
          break;
 8002e26:	e005      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	4904      	ldr	r1, [pc, #16]	; (8002e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4d0d      	ldr	r5, [pc, #52]	; (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1b64      	subs	r4, r4, r5
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2600      	movs	r6, #0
 8002e64:	42a6      	cmp	r6, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4d0b      	ldr	r5, [pc, #44]	; (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 f820 	bl	8002eb0 <_init>
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2600      	movs	r6, #0
 8002e76:	42a6      	cmp	r6, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e80:	4798      	blx	r3
 8002e82:	3601      	adds	r6, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8a:	4798      	blx	r3
 8002e8c:	3601      	adds	r6, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08003308 	.word	0x08003308
 8002e94:	08003308 	.word	0x08003308
 8002e98:	08003308 	.word	0x08003308
 8002e9c:	0800330c 	.word	0x0800330c

08002ea0 <memset>:
 8002ea0:	4402      	add	r2, r0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
